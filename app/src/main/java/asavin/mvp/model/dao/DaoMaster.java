package asavin.mvp.model.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        BrandDao.createTable(db, ifNotExists);
        BucketDao.createTable(db, ifNotExists);
        ColoringDao.createTable(db, ifNotExists);
        FeltpenDao.createTable(db, ifNotExists);
        PuzzleDao.createTable(db, ifNotExists);
        SchoolDao.createTable(db, ifNotExists);
        ToyDao.createTable(db, ifNotExists);
        FrameDao.createTable(db, ifNotExists);
        GuideDao.createTable(db, ifNotExists);
        BurningDao.createTable(db, ifNotExists);
        DecoratingDao.createTable(db, ifNotExists);
        DecoupageDao.createTable(db, ifNotExists);
        GildingDao.createTable(db, ifNotExists);
        QuillingDao.createTable(db, ifNotExists);
        WallowDao.createTable(db, ifNotExists);
        BrushDao.createTable(db, ifNotExists);
        CanvasDao.createTable(db, ifNotExists);
        EaselDao.createTable(db, ifNotExists);
        PaintDao.createTable(db, ifNotExists);
        PaperDao.createTable(db, ifNotExists);
        PencilDao.createTable(db, ifNotExists);
        SculptinsideDao.createTable(db, ifNotExists);
        ThreadDao.createTable(db, ifNotExists);
        ChildProductDao.createTable(db, ifNotExists);
        HobbieProductDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        BrandDao.dropTable(db, ifExists);
        BucketDao.dropTable(db, ifExists);
        ColoringDao.dropTable(db, ifExists);
        FeltpenDao.dropTable(db, ifExists);
        PuzzleDao.dropTable(db, ifExists);
        SchoolDao.dropTable(db, ifExists);
        ToyDao.dropTable(db, ifExists);
        FrameDao.dropTable(db, ifExists);
        GuideDao.dropTable(db, ifExists);
        BurningDao.dropTable(db, ifExists);
        DecoratingDao.dropTable(db, ifExists);
        DecoupageDao.dropTable(db, ifExists);
        GildingDao.dropTable(db, ifExists);
        QuillingDao.dropTable(db, ifExists);
        WallowDao.dropTable(db, ifExists);
        BrushDao.dropTable(db, ifExists);
        CanvasDao.dropTable(db, ifExists);
        EaselDao.dropTable(db, ifExists);
        PaintDao.dropTable(db, ifExists);
        PaperDao.dropTable(db, ifExists);
        PencilDao.dropTable(db, ifExists);
        SculptinsideDao.dropTable(db, ifExists);
        ThreadDao.dropTable(db, ifExists);
        ChildProductDao.dropTable(db, ifExists);
        HobbieProductDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(BrandDao.class);
        registerDaoClass(BucketDao.class);
        registerDaoClass(ColoringDao.class);
        registerDaoClass(FeltpenDao.class);
        registerDaoClass(PuzzleDao.class);
        registerDaoClass(SchoolDao.class);
        registerDaoClass(ToyDao.class);
        registerDaoClass(FrameDao.class);
        registerDaoClass(GuideDao.class);
        registerDaoClass(BurningDao.class);
        registerDaoClass(DecoratingDao.class);
        registerDaoClass(DecoupageDao.class);
        registerDaoClass(GildingDao.class);
        registerDaoClass(QuillingDao.class);
        registerDaoClass(WallowDao.class);
        registerDaoClass(BrushDao.class);
        registerDaoClass(CanvasDao.class);
        registerDaoClass(EaselDao.class);
        registerDaoClass(PaintDao.class);
        registerDaoClass(PaperDao.class);
        registerDaoClass(PencilDao.class);
        registerDaoClass(SculptinsideDao.class);
        registerDaoClass(ThreadDao.class);
        registerDaoClass(ChildProductDao.class);
        registerDaoClass(HobbieProductDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
